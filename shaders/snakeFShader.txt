precision mediump float;

uniform vec3 uPointLightColor[5];
uniform vec3 uPointLightLocation[5];
uniform float uPointLightMinRange[5];
uniform float uPointLightMaxRange[5];
uniform float uMiddleRing;

uniform vec3 uAmbientLightColor;

varying vec4 vColor;
varying vec4 vPosition;
varying vec3 vTransformedNormal;

void main(void) {

vec3 lightWeighting = uAmbientLightColor;
vec3 snakeLightWeighting = vec3(0.0, 0.0, 0.0);

for(int i = 0; i < 1; i++){
   float pointLightDistance = distance(uPointLightLocation[i], vPosition.xyz);
   float pointLightDistanceMultiplier;
   if(pointLightDistance < uPointLightMinRange[i]){
      pointLightDistanceMultiplier = 1.0;
   }
   else if (pointLightDistance > (uPointLightMinRange[i] + uPointLightMaxRange[i])){
      pointLightDistanceMultiplier = 0.0;
   }
   else{
      pointLightDistanceMultiplier = max(1.0 - (pointLightDistance - uPointLightMinRange[i])/uPointLightMaxRange[i], 0.0);
   };
   
   vec3 lightDirection = normalize(uPointLightLocation[i] - vPosition.xyz);
   float directionalLightWeighting = max(dot(normalize(vTransformedNormal), lightDirection), 0.0);
   
   lightWeighting += uPointLightColor[i] * directionalLightWeighting * pointLightDistanceMultiplier;
}



for (int i = 1; i <= 2; i++) {

   float pointLightDistance = distance(uPointLightLocation[i], vPosition.xyz);
   float pointLightDistanceMultiplier;
   vec3 temp =  uPointLightColor[i];
   
  if(pointLightDistance < uPointLightMinRange[i]){
      temp += (vec3(0.5, 0.5, 0.5) * (1.0 -(pointLightDistance / uPointLightMinRange[i])));
      pointLightDistanceMultiplier = 1.0;
   }
   else{
      pointLightDistanceMultiplier = max(1.0 - (pointLightDistance - uPointLightMinRange[i])/uPointLightMaxRange[i], 0.0);
   };
   
   vec3 lightDirection = normalize(uPointLightLocation[i] - vPosition.xyz);
   float directionalLightWeighting = max(dot(normalize(vTransformedNormal), lightDirection), 0.0);

   snakeLightWeighting += temp * directionalLightWeighting * pointLightDistanceMultiplier;

}   

vec3 tempColor = vColor.rgb;
float sqDistToOrigin = vPosition.x * vPosition.x + vPosition.y * vPosition.y;

if(uMiddleRing > 0.5){
    if((sqDistToOrigin > 0.01)&&(sqDistToOrigin < 0.012)) {
       tempColor = vec3(1.0, 0.0, 0.0);
       lightWeighting = vec3(1.0, 1.0, 1.0);
       snakeLightWeighting = vec3(0.0,0.0,0.0);
    }
    else if((sqDistToOrigin >= 0.012)&&(sqDistToOrigin < 0.014)){
       tempColor = vec3(0.0, 1.0, 0.0);
       lightWeighting = vec3(1.0, 1.0, 1.0);
       snakeLightWeighting = vec3(0.0,0.0,0.0);
    }
}
   gl_FragColor = vec4((tempColor * lightWeighting) + snakeLightWeighting, vColor.a);
}