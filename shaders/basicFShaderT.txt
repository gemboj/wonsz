precision mediump float;

uniform vec3 uPointLightColor[5];
uniform vec3 uPointLightLocation[5];
uniform float uPointLightMinRange[5];
uniform float uPointLightMaxRange[5];
uniform int uPointLightNumber;

uniform vec3 uAmbientLightColor;

uniform float uShininess;

uniform sampler2D uTexture[1];

varying vec4 vPosition;
varying vec3 vTransformedNormal;
varying vec2 vTextureCoord;

void main(void) {
    vec3 lightWeighting = uAmbientLightColor;
    vec3 normal = normalize(vTransformedNormal);
    vec3 eyeDirection = normalize(-vPosition.xyz);

    for(int i = 0; i < 5; i++){
       float pointLightDistance = distance(uPointLightLocation[i], vPosition.xyz);
       float pointLightDistanceMultiplier;
       if(pointLightDistance < uPointLightMinRange[i]){
          pointLightDistanceMultiplier = 1.0;
       }
       else if (pointLightDistance > (uPointLightMinRange[i] + uPointLightMaxRange[i])){
          pointLightDistanceMultiplier = 0.0;
       }
       else{
          pointLightDistanceMultiplier = max(1.0 - (pointLightDistance - uPointLightMinRange[i])/uPointLightMaxRange[i], 0.0);
       };

       vec3 lightDirection = normalize(uPointLightLocation[i] - vPosition.xyz);
       float directionalLightWeighting = max(dot(normal, lightDirection), 0.0);

       vec3 reflectionDirection = reflect(-lightDirection, normal);
       
       if(uShininess == 0.0){
            lightWeighting += uPointLightColor[i] * directionalLightWeighting * pointLightDistanceMultiplier;
       }
       else{
            float specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), uShininess);
            lightWeighting += uPointLightColor[i] * directionalLightWeighting * pointLightDistanceMultiplier + specularLightWeighting * vec3(1.0, 1.0, 1.0);
       }
       if(i == (uPointLightNumber-1)){
            break;
       }
    }
   vec4 colorT = texture2D(uTexture[0], vec2(vTextureCoord.s, vTextureCoord.t));

   gl_FragColor = vec4(colorT.rgb * lightWeighting, 1.0);
}